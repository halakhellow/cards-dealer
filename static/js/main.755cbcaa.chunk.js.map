{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","angle","Math","random","xPosition","yPosition","transform","className","src","this","image","alt","style","Component","Deck","state","deck","drawnCards","outOfCards","getCard","bind","fetch","then","res","json","data","setState","deck_id","success","card","cards","st","id","code","value","suit","map","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAuBeA,G,wDAnBb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC/BC,EAA4B,GAAhBF,KAAKC,SACjBE,EAA4B,GAAhBH,KAAKC,SAJF,OAKjB,EAAKG,UAAL,oBAA8BF,EAA9B,cAA6CC,EAA7C,sBAAoEJ,EAApE,QALiB,E,qDAQjB,OACE,yBACEM,UAAU,OACVC,IAAKC,KAAKT,MAAMU,MAChBC,IAAKF,KAAKT,MAAMW,IAChBC,MAAO,CAAEN,UAAWG,KAAKH,iB,GAddO,cC6DJC,G,wDA3Db,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDe,MAAQ,CAAEC,KAAM,KAAMC,WAAY,GAAIC,YAAY,GACvD,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAHE,E,gEAME,IAAD,OAClBC,MAAM,mDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEV,KAAMS,S,gCAIjB,IAAD,OACRJ,MAAM,uCAAD,OACoCZ,KAAKM,MAAMC,KAAKW,QADpD,WAGFL,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,GAAKA,EAAKG,QACL,CACH,IAAIC,EAAOJ,EAAKK,MAAM,GACtB,EAAKJ,UAAS,SAACK,GAAD,MAAS,CACrBd,WAAW,GAAD,mBACLc,EAAGd,YADE,CAER,CACEe,GAAIH,EAAKI,KACTvB,MAAOmB,EAAKnB,MACZC,IAAI,GAAD,OAAKkB,EAAKK,MAAV,YAAmBL,EAAKM,kBAThB,EAAKT,SAAS,CAAER,YAAY,S,+BAkBnD,IAAIY,EAAQrB,KAAKM,MAAME,WAAWmB,KAAI,SAACP,GAAD,OACpC,kBAAC,EAAD,CAAMnB,MAAOmB,EAAKnB,MAAOC,IAAKkB,EAAKlB,IAAK0B,IAAKR,EAAKG,QAEpD,OACE,6BACGvB,KAAKM,MAAMG,WACV,wBAAIX,UAAU,gBAAd,kBAEA,6BACE,wBAAIA,UAAU,cAAd,0CACA,4BAAQA,UAAU,WAAW+B,QAAS7B,KAAKU,SAA3C,iBAKJ,yBAAKZ,UAAU,cAAcuB,Q,GAtDlBjB,c,MCQJ0B,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.755cbcaa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Card.css\";\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let angle = Math.random() * 90 - 45,\r\n      xPosition = Math.random() * 30,\r\n      yPosition = Math.random() * 30;\r\n    this.transform = `translate(${xPosition}px,${yPosition}px) rotate(${angle}deg)`;\r\n  }\r\n  render() {\r\n    return (\r\n      <img\r\n        className=\"Card\"\r\n        src={this.props.image}\r\n        alt={this.props.alt}\r\n        style={{ transform: this.transform }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./Deck.css\";\r\n\r\nclass Deck extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { deck: null, drawnCards: [], outOfCards: false };\r\n    this.getCard = this.getCard.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({ deck: data });\r\n      });\r\n  }\r\n\r\n  getCard() {\r\n    fetch(\r\n      `https://deckofcardsapi.com/api/deck/${this.state.deck.deck_id}/draw/`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (!data.success) this.setState({ outOfCards: true });\r\n        else {\r\n          let card = data.cards[0];\r\n          this.setState((st) => ({\r\n            drawnCards: [\r\n              ...st.drawnCards,\r\n              {\r\n                id: card.code,\r\n                image: card.image,\r\n                alt: `${card.value}-${card.suit}`,\r\n              },\r\n            ],\r\n          }));\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let cards = this.state.drawnCards.map((card) => (\r\n      <Card image={card.image} alt={card.alt} key={card.id} />\r\n    ));\r\n    return (\r\n      <div>\r\n        {this.state.outOfCards ? (\r\n          <h1 className=\"Deck-nocards\">NO MORE CARDS!</h1>\r\n        ) : (\r\n          <div>\r\n            <h1 className=\"Deck-title\">♠️ CARDS DEALER ♠️</h1>\r\n            <button className=\"Deck-btn\" onClick={this.getCard}>\r\n              Get a card !\r\n            </button>\r\n          </div>\r\n        )}\r\n        <div className=\"Deck-cards\">{cards}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n","import React from \"react\";\nimport Deck from \"./Deck\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}